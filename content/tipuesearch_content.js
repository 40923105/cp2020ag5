var tipuesearch = {"pages": [{'title': '功課繳交', 'text': '', 'tags': '', 'url': '功課繳交.html'}, {'title': 'H1', 'text': '40923135 12/11 \n 40923110 12/18 \n <<<<<<< HEAD \n', 'tags': '', 'url': 'H1.html'}, {'title': 'H3', 'text': '', 'tags': '', 'url': 'H3.html'}, {'title': 'p1', 'text': 'chapter input \n input strings types int \n Calibrating the exercises to the audience is going to be a challenging task, so I ask you to bear with me if the exercises are too easy or too hard. Every week there will be a poll you can click on to discuss whether the exercise is too easy or too hard and hopefully in a few weeks, I’ll get the level right. Let’s get to it! I will start with the exercise and include a discussion later, in case you want the extra challenge. \n Exercise1(Solution) \n Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old. \n Extras: \n \n Add on to the previous program by asking the user for another number and printing out that many copies of the previous message. ( Hint: \xa0 order of operations \xa0 exists in Python ) \n Print out that many copies of the previous message on separate lines. ( Hint: the string \xa0 "\\n \xa0 is the same as pressing the ENTER button ) \n \n Discosion \n Concepts for this week: \n \n Getting user input \n Manipulating strings (a few ways) \n \n user input in python \n To get user input in Python (3), the command you use is \xa0 input() . Store the result in a variable, and use it to your heart’s content. Remember that the result you get from the user will be a string, even if they enter a number. \n For example, \n \n name   =   input ( "Give me your name: " ) \n print ( "Your name is "   +   name ) \n \n What this will print in the terminal (or the shell, whatever you are running Python in) will be: \n \n >>>   Give   me   your   name :   Michele \n Your   name   is   Michele \n \n What happens at the end of \xa0 input() \xa0 is that it waits for the user to type something and press ENTER. Only after the user presses ENTER does the program continue. \n What you get from the \xa0 input() \xa0 function is a string. What can you do with it? \n First: Make the string into a number. Let’s say you are 100% positive that the user entered a number. You can turn the string into an integer with the function \xa0 int() . (In a later exercise or two or three there will be questions about what to do when the user does NOT enter a number and you try to do this; for now don’t worry about that problem). Here is what this looks like: \n \n age   =   input ( "Enter your age: " ) \n age   =   int ( age ) \n \n (or, if you want to be more compact with your code) \n \n age   =   int ( input ( "Enter your age: " )) \n\t \n \n In both cases, \xa0 age \xa0 will hold a variable that is an integer, and now you can do math with it. \n (Note, you can also turn integers into strings exactly in the opposite way, using the \xa0 str() \xa0 function) \n Second: Do math with strings. What do I mean by that? I mean, if I want to combine (concatenate \xa0 is the computer science word for this) strings, all I need to do is add them: \n \n \t\n print ( "Were"   +   "wolf" ) \n print ( "Door"   +   "man" ) \n print ( "4"   +   "chan" ) \n print ( str ( 4 )   +   "chan" ) \n \n The same works for multiplication: \n \n print ( 4   *   "test" ) \n \n but division and subtraction do not work like this. In terms of multiplication, the idea of multiplyling two strings together is not well-defined. What does it mean to multiply two strings in the first place? However, it makes sense in a way to specify multiplying a string by a number - just repeat that string that number of times. Try this in your own program with all the arithmetic operations with numbers and strings - the best way to get a feel for what works and what doesn’t is to try it! \n Happy coding \n Forgot how to \xa0 submit exercises ? \n \n', 'tags': '', 'url': 'p1.html'}, {'title': '組員名單-1', 'text': '======= \n 40923105 12/25 \n', 'tags': '', 'url': '組員名單-1.html'}, {'title': '組員名單-2', 'text': '>>>>>>> f177d903d2b01a4a7c5845d7f06bf87af5e92638 \n Repository: \xa0 40923105 \xa0 | Site: \xa0 40923105 Repository: \xa0 40923109 \xa0 | Site: \xa0 40923109 Repository: \xa0 40923110 \xa0 | Site: \xa0 40923110 Repository: \xa0 40923111 \xa0 | Site: \xa0 40923111 Repository: \xa0 40923122 \xa0 | Site: \xa0 40923122 Repository: \xa0 40923130 \xa0 | Site: \xa0 40923130 Repository: \xa0 40923134 \xa0 | Site: \xa0 40923134 Repository: \xa0 40923135 \xa0 | Site: \xa0 40923135 \xa0 (組長) Repository: \xa0 40923139 \xa0 | Site: \xa0 40923139 Repository: \xa0 40923143 \xa0 | Site: \xa0 40923143 Repository: \xa0 40923153 \xa0 | Site: \xa0 40923153 \n \n', 'tags': '', 'url': '組員名單-2.html'}]};