var tipuesearch = {"pages": [{'title': '功課繳交', 'text': '', 'tags': '', 'url': '功課繳交.html'}, {'title': 'H1', 'text': '40923135 12/11 \n 40923110 12/18 \n 40923111 01/07 \n', 'tags': '', 'url': 'H1.html'}, {'title': 'H3', 'text': '40923135 01/04 \n', 'tags': '', 'url': 'H3.html'}, {'title': 'H3 (ALL EXERCISES)', 'text': '', 'tags': '', 'url': 'H3 (ALL EXERCISES).html'}, {'title': 'p1', 'text': 'chapter input \n input strings types int \n Calibrating the exercises to the audience is going to be a challenging task, so I ask you to bear with me if the exercises are too easy or too hard. Every week there will be a poll you can click on to discuss whether the exercise is too easy or too hard and hopefully in a few weeks, I’ll get the level right. Let’s get to it! I will start with the exercise and include a discussion later, in case you want the extra challenge. \n Exercise1(Solution) \n Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old. \n Extras: \n \n Add on to the previous program by asking the user for another number and printing out that many copies of the previous message. ( Hint: \xa0 order of operations \xa0 exists in Python ) \n Print out that many copies of the previous message on separate lines. ( Hint: the string \xa0 "\\n \xa0 is the same as pressing the ENTER button ) \n \n Discosion \n Concepts for this week: \n \n Getting user input \n Manipulating strings (a few ways) \n \n user input in python \n To get user input in Python (3), the command you use is \xa0 input() . Store the result in a variable, and use it to your heart’s content. Remember that the result you get from the user will be a string, even if they enter a number. \n For example, \n \n name   =   input ( "Give me your name: " ) \n print ( "Your name is "   +   name ) \n \n What this will print in the terminal (or the shell, whatever you are running Python in) will be: \n \n >>>   Give   me   your   name :   Michele \n Your   name   is   Michele \n \n What happens at the end of \xa0 input() \xa0 is that it waits for the user to type something and press ENTER. Only after the user presses ENTER does the program continue. \n What you get from the \xa0 input() \xa0 function is a string. What can you do with it? \n First: Make the string into a number. Let’s say you are 100% positive that the user entered a number. You can turn the string into an integer with the function \xa0 int() . (In a later exercise or two or three there will be questions about what to do when the user does NOT enter a number and you try to do this; for now don’t worry about that problem). Here is what this looks like: \n \n age   =   input ( "Enter your age: " ) \n age   =   int ( age ) \n \n (or, if you want to be more compact with your code) \n \n age   =   int ( input ( "Enter your age: " )) \n\t \n \n In both cases, \xa0 age \xa0 will hold a variable that is an integer, and now you can do math with it. \n (Note, you can also turn integers into strings exactly in the opposite way, using the \xa0 str() \xa0 function) \n Second: Do math with strings. What do I mean by that? I mean, if I want to combine (concatenate \xa0 is the computer science word for this) strings, all I need to do is add them: \n \n \t\n print ( "Were"   +   "wolf" ) \n print ( "Door"   +   "man" ) \n print ( "4"   +   "chan" ) \n print ( str ( 4 )   +   "chan" ) \n \n The same works for multiplication: \n \n print ( 4   *   "test" ) \n \n but division and subtraction do not work like this. In terms of multiplication, the idea of multiplyling two strings together is not well-defined. What does it mean to multiply two strings in the first place? However, it makes sense in a way to specify multiplying a string by a number - just repeat that string that number of times. Try this in your own program with all the arithmetic operations with numbers and strings - the best way to get a feel for what works and what doesn’t is to try it! \n Happy coding \n Forgot how to \xa0 submit exercises ? \n 字符輸入 \n 輸入字符串類型int \n 向觀眾校準練習將是一項艱鉅的任務，因此，我請您忍受練習是否太容易或太難。 每週都會有一個民意測驗，您可以單擊以討論該練習是太容易還是太難了，希望在幾週後，我會把水平調到正確的水平。 讓我們開始吧！ 如果您需要額外的挑戰，我將從練習開始，並在以後進行討論。 \n 練習1和解決方案 \n 創建一個程序，要求用戶輸入他們的姓名和年齡。 打印給他們的消息，告訴他們他們將滿100歲的年份。 \n 附加功能： \n \n 通過詢問用戶另一個號碼並打印出先前消息的許多副本來添加到先前的程序中。 （ 提示： 操作順序 在Python中存在 ） \n 在單獨的行上打印出先前消息的許多副本。 （ 提示：字符串 "\\n 與按ENTER按鈕相同 ） \n \n 討論區 \n 本週的概念： \n \n 獲取用戶輸入 \n 處理字符串（幾種方法） \n \n 使用python輸入 \n 要在Python（3）中獲得用戶輸入，您使用的命令是 input() 。 將結果存儲在變量中，並將其用於您的內心。 請記住，即使用戶輸入數字，您從用戶那裡得到的結果也將是字符串。 \n 例如， \n \n name   =   input ( "Give me your name: " ) \n print ( "Your name is "   +   name ) \n \n 這將在終端（或外殼，無論您在其中運行Python的是什麼）中顯示的內容是： \n \n >>>   Give   me   your   name :   Michele \n Your   name   is   Michele \n \n 最後發生的事情 input() 是，它等待用戶鍵入內容並按Enter。 僅在用戶按下ENTER之後，程序才會繼續。 \n 處理字符串 \n 從 input() 函數中 得到的 是一個字符串。 你能做什麼呢？ \n 第一：將字符串變成數字。 假設您100％肯定用戶輸入了數字。 您可以使用函數將字符串轉換為整數 int() 。 （在以後的一兩三個練習中，當用戶不輸入數字而您嘗試這樣做時，將會出現有關如何處理的問題；現在不必擔心該問題）。 看起來像這樣： \n \n age   =   input ( "Enter your age: " ) \n age   =   int ( age ) \n \n （或者，如果您想使代碼更緊湊） \n \n age   =   int ( input ( "Enter your age: " )) \n\t \n \n 在這兩種情況下， age 都將包含一個整數變量，現在您可以使用它進行數學運算。 \n （注意，您也可以使用 str() 函數 以相反的方式將整數轉換為字符串 ） \n 第二：對字符串進行數學運算。 那是什麼意思 \xa0 我的意思是，如果我想組合（ 連接 起來 就是計算機科學這個詞）字符串，我要做的就是添加它們： \n \n \t\n print ( "Were"   +   "wolf" ) \n print ( "Door"   +   "man" ) \n print ( "4"   +   "chan" ) \n print ( str ( 4 )   +   "chan" ) \n \n 乘法的工作原理相同： \n \n print ( 4   *   "test" ) \n \n 但是除法和減法不是這樣的。 就乘法而言，將兩個字符串相乘的想法尚不明確。 首先將兩個字符串相乘是什麼意思？ 但是，以某種方式指定將字符串乘以數字是有意義的-只需將該字符串重複該次數即可。 在您自己的程序中嘗試使用帶有數字和字符串的所有算術運算-嘗試一下什麼有效和什麼無效的最佳方法是嘗試一下！ \n', 'tags': '', 'url': 'p1.html'}, {'title': 'p2', 'text': 'ODD OR EVEN \n input if types int equality comparison numbers mod \n Again, the exercise comes first (with a few extras if you want the extra challenge or want to spend more time), followed by a discussion. Enjoy! \n EXERCISE AND SOLUTIONS \n Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user. \xa0 Hint: how does an even / odd number react differently when divided by 2? \n Extras: \n \n If the number is a multiple of 4, print out a different message. \n Ask the user for two numbers: one number to check (call it \xa0 num ) and one number to divide by ( check ). If \xa0 check \xa0 divides evenly into \xa0 num , tell that to the user. If not, print a different appropriate message \n \n .DISSCUSION \n Concepts for this week: \n \n Modular arithmetic (the modulus operator) \n Conditionals (if statements) \n Checking equality \n \n We have been doing arithmetic (addition, subtraction, multiplication, division) since elementary school, and often it is useful for us to find not the answer to a division problem but the remainder when we do a division operation. This operation is called the “modulus operation.” For example, when I divide 5 by 3, the remainder is 2, and the sentence reads like this: “5 modulo 3 is 2.” \n In the Python shell: \n \n   \n >>>   5   %   3 \n 2 \n >>>   6   %   3 \n 0 \n >>>   7   %   3 \n 1 \n \n The \xa0 % \xa0 sign is exactly the modulus operator. \n CONDITIONAL \n When a computer (or a program) needs to decide something, it checks whether some condition is satisfied, which is where the term \xa0 conditional \xa0 comes from. Conditionals are a fancy way of saying “if statements”. If Michele was born in New York, she has an American passport. That statement is a conditional (if statement) that in this case is true. In Python this works the same way: \n \n   \n if   age   >   17 :  \n   print ( "can see a rated R movie" ) \n elif   age   <   17   and   age   >   12 : \n   print ( "can see a rated PG-13 movie" ) \n else :  \n   print ( "can only see rated PG movies" ) \n \n When the program gets to the \xa0 if \xa0 statement, it will check the value of the variable called \xa0 age \xa0 against all of the conditions, in order, and will print something to the screen accordingly. Note that \xa0 elif \xa0 is a portmanteau of “else” and “if”. So if the variable \xa0 age \xa0 holds the value 15, the statement \xa0 "can see a rated PG-13 movie" \xa0 will be printed to the screen. \n Note how the statement \xa0 elif age < 17 and age > 12 \xa0 has the statement \xa0 and \xa0 - you can use \xa0 or \xa0 and \xa0 not \xa0 in the same way. Understanding a bit about logic and how it works, or being able to rationally think about logic will help you get the conditions right - oh, and a lot of practice. \n Links about conditionals: \n \n The official Python documentation \n Python for beginners explains conditionals \n \n CHEKING OR EQUALITY \n A fundamental thing you want to do with your program is check whether some number is equal to another. Say the user tells you how many questions they answered incorrectly on a practice exam, and depending on the number of correctly-answered questions, you can suggest a specific course of action. For integers, strings, floats, and many other variable types, this is done with a simple syntax: \xa0 == . To explicitly check inequality, use \xa0 != . \n \n   \n if   a   ==   3 :  \n   print ( "the variable has the value 3" ) \n elif   a   !=   3 : \n   print ( "the variable does not have the value 3" ) \n \n Notice how in this example, the condition is redundant. In the first condition we are checking whether the variable \xa0 a \xa0 has the value 3 and in the second, we are checking whether \xa0 a \xa0 does NOT have the value 3. However, if the first condition is not true ( a \xa0 is in fact not 3), then the second condition is by definition true. So a more efficient way to write the above conditional is like this: \n \n if   a   ==   3 :  \n   print ( "the variable has the value 3" ) \n else : \n   print ( "the variable does not have the value 3" ) \n \n The same equality / inequality comparisons work for strings. \n Links about equality and comparators:] \n 基數或偶數 \n 輸入類型是否等於相等比較數mod \n 再次，練習是第一位的（如果您需要額外的挑戰或想要花費更多的時間，還可以進行一些其他操作），然後進行討論。 請享用！ \n 練習2和解決方法 \n 詢問用戶一個數字。 根據數字是偶數還是奇數，向用戶打印一條適當的消息。 提示：偶數/奇數除以2時的反應如何？ \n 附加功能： \n \n 如果數字是4的倍數，請打印出另一條消息。 \n 向用戶詢問兩個數字：一個數字要檢查（稱為 num ），另一個數字要除以（ check ）。 如果 check 平均分為 num ，請告知用戶。 如果不是，請打印其他適當的消息。 \n \n 討論區 \n 本週的概念： \n \n 模塊化算術（模運算符） \n 有條件的（如果語句） \n 檢查平等 \n \n 模塊換算數 \n 從小學開始，我們就一直在進行算術運算（加，減，乘，除），這對於我們尋找除法問題不是答案，而是對除法運算的其餘部分有用。 該操作稱為“模運算”。 例如，當我將5除以3時，餘數為2，句子的內容如下：“ 5模3為2”。 \n 在Python Shell中： \n \n   \n >>>   5   %   3 \n 2 \n >>>   6   %   3 \n 0 \n >>>   7   %   3 \n 1 \n \n 該 % 標誌是完全模運算符。 \n 有條件 \n 當計算機（或程序）需要做出決定時，它會檢查是否滿足某些條件，這就是 條件 一詞的來源。 條件語句是說“ if語句”的一種奇特的方式。 如果米歇爾（Michele）出生於紐約，則她擁有美國護照。 該語句是在這種情況下為真的條件（如果語句）。 在Python中，這是相同的方式： \n \n   \n if   age   >   17 :  \n   print ( "can see a rated R movie" ) \n elif   age   <   17   and   age   >   12 : \n   print ( "can see a rated PG-13 movie" ) \n else :  \n   print ( "can only see rated PG movies" ) \n \n 當程序到達該 if 語句時，它將按 age 所有條件依次 檢查被調用的變量的值 ，並將相應的內容打印到屏幕上。 請注意，這 elif 是“ else”和“ if”的組合。 因此，如果變量 age 保留值15，則該語句 "can see a rated PG-13 movie" 將被打印到屏幕上。 \n 請注意該語句如何 elif age < 17 and age > 12 具有該語句 and -您可以使用 or 和 not 以相同的方式。 了解一些有關邏輯及其原理的知識，或者能夠理性地思考邏輯，將幫助您找到合適的條件-哦，還有很多練習。 \n 有關條件的鏈接： \n \n 官方Python文檔 \n 初學者使用Python解釋條件 \n \n 檢查是否相等 \n \n 查是否相等 您要對程序執行的基本操作是檢查某個數字是否等於另一個數字。 假設用戶告訴您在練習考試中有多少個錯誤回答的問題，並且根據正確回答的問題數，您可以提出具體的操作建議。 對於整數，字符串，浮點數和許多其他變量類型，這是通過簡單的語法完成的： == 。 要顯式檢查不平等，請使用 != 。 \n \n   \n if   a   ==   3 :  \n   print ( "the variable has the value 3" ) \n elif   a   !=   3 : \n   print ( "the variable does not have the value 3" ) \n \n 請注意，在此示例中，條件是多餘的。 在第一個條件中，我們正在檢查變量是否 a 具有值3，在第二個 條件中，我們正在檢查變量 是否 a 不具有值3。但是，如果第一個條件不成立（ a 實際上不是3），則第二個條件根據定義，條件是正確的。 因此，編寫上述條件的更有效方法如下： \n \n if   a   ==   3 :  \n   print ( "the variable has the value 3" ) \n else : \n   print ( "the variable does not have the value 3" ) \n \n 相同的相等/不相等比較適用於字符串。 \n 有關相等性和比較器的鏈接： \n', 'tags': '', 'url': 'p2.html'}, {'title': 'P3-1', 'text': 'LISS LES THAN TEN \n list numbers elements if conditional \n \n EXERCISE3 \n Take a list, say for example this one: \n \n    a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n \n and write a program that prints out all the elements of the list that are less than 5. \n Extras: \n \n Instead of printing the elements one by one, make a new list that has all the elements less than 5 from this list in it and print out this new list. \n Write this in one line of Python. \n Ask the user for a number and return a list that contains only elements from the original list \xa0 a \xa0 that are smaller than that number given by the user. \n \n DISSCUSION \n This week’s topics: \n \n Lists \n More conditionals (if statements) \n \n LISTS \n This week’s exercise hits on a topic critical for all types and styles of programming: \xa0 lists . Lists are basically an ordered way of grouping things (called \xa0 elements ) - the cool thing about lists in Python is that you can have a list that contains objects of multiple types. Your list can mix between strings, integers, objects, other lists, what have you. \n The way to construct an empty list is just to do \n \n x   =   [] \n \n And your variable \xa0 x \xa0 now holds an empty list. To add things to this list, just “append” them to the list. Like so: \n \n x   =   [] \n x . append ( 3 ) \n \n Your list \xa0 x \xa0 now looks like \xa0 [3] . \n In Python, lists are also \xa0 iterables , which means you can loop through them with a \xa0 for loop \xa0 in a convenient way. (If you come from other languages like C++ or Java you are most likely used to using a counter to loop through indices of a list - in Python you can actually loop through the elements.) I will let the code speak for itself: \n \n my_list   =   [ 1 ,   3 ,   "Michele" ,   [ 5 ,   6 ,   7 ]] \n for   element   in   my_list : \n   print ( element ) \n \n Will yield the result: \n \n 1 \n3\n"Michele"\n[5, 6, 7] \n \n There are many other properties of lists, but for the basic exercise all you should need is this for loop property. Future weeks will address other properties of lists. \n For more information about lists in Python, check out these resources: \n \n The official Python documentation on lists \n Tutorialspoint on Python lists \n Someone else’s blog post about lists \n \n MORE CONDITIONAL \n The nice thing about conditionals is that they follow logical operations. They can also be used to test equality. Let’s do a small example. Let’s say I want to make a piece of code that converts from a numerical grade (1-100) to a letter grade (A, B, C, D, F). The code would look like this: \n \n grade   =   input ( "Enter your grade: " ) \n if   grade   >=   90 : \n   print ( "A" ) \n elif   grade   >=   80 : \n   print ( "B" ) \n elif   grade   >=   70 : \n   print ( "C" ) \n elif   grade   >=   65 : \n   print ( "D" ) \n else : \n   print ( "F" ) \n \n What happens if \xa0 grade \xa0 is 50? All the conditions are false, so \xa0 "F" \xa0 gets printed on the screen. But what if \xa0 grade \xa0 is 95? Then all the conditions are true and everything gets printed, right? Nope! What happens is the program goes line by line. The first condition (grade >= 90) is satisfied, so the program enters into the code inside the \xa0 if \xa0 statement, executing \xa0 print("A") . Once code inside a conditional has been executed, the rest of the conditions are skipped and none of the other conditionals are checked. \n 列出少於10 \n 如果有條件，則列出數字元素 \n', 'tags': '', 'url': 'P3-1.html'}, {'title': '', 'text': '練習3和解決方法 \n 例如說一個 \n \n    a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n \n 並編寫一個程序，打印出列表中小於5的所有元素。 \n 附加功能： \n \n 而不是一個一個地打印元素，而是創建一個新列表，其中該列表中的所有元素少於5個，然後打印出該新列表。 \n 用一行Python編寫。 \n 向用戶詢問一個數字，然後返回一個列表，該列表僅包含原始列表 a 中小於用戶給定數字的 元素 。 \n \n 討論區 \n 本週主題： \n \n 清單 \n 更多條件（如果語句） \n \n 清單 \n 本週的練習涉及一個對所有類型和風格的編程都至關重要的主題： list 。 列表基本上是一種將事物（稱為 elements ） 進行分組的有序方式-Python中 列表的最酷的事情是，您可以擁有一個包含多種類型的對象的列表。 您的列表可以混合在字符串，整數，對象，其他列表之間，包括您所擁有的。 \n 構造一個空列表的方法就是 \n \n x   =   [] \n \n x 現在 ，您的變量 包含一個空列表。 要將內容添加到此列表中，只需將它們“添加”到列表中即可。 像這樣： \n \n x   =   [] \n x . append ( 3 ) \n \n 您的清單 x 現在看起來像 [3] 。 \n 在Python中，列表也是 可迭代的 ，這意味著您可以 方便地 使用 for循環 遍歷它們 。 （如果您來自其他語言，例如C ++或Java，則最有可能習慣於使用計數器循環遍歷列表的索引-在Python中，您實際上可以循環遍曆元素。）我將讓代碼說明自己： \n \n my_list   =   [ 1 ,   3 ,   "Michele" ,   [ 5 ,   6 ,   7 ]] \n for   element   in   my_list : \n   print ( element ) \n \n 將產生結果： \n \n 1  \n3 \n"Michele" \n[5, 6, 7] \n \n 列表還有許多其他屬性，但是對於基本練習而言，您只需要此for循環屬性。 未來幾週將處理列表的其他屬性。 \n 有關Python中列表的更多信息，請查看以下資源： \n \n 列表中的官方Python文檔 \n Python清單上的Tutorialspoint \n 他人關於列表的博客文章 \n \n 更多條件 \n 關於條件的好處是它們遵循邏輯運算。 它們也可以用於測試相等性。 讓我們做一個小例子。 假設我要編寫一段代碼，將其從數字等級（1-100）轉換為字母等級（A，B，C，D，F）。 代碼如下所示： \n \n grade   =   input ( "Enter your grade: " ) \n if   grade   >=   90 : \n   print ( "A" ) \n elif   grade   >=   80 : \n   print ( "B" ) \n elif   grade   >=   70 : \n   print ( "C" ) \n elif   grade   >=   65 : \n   print ( "D" ) \n else : \n   print ( "F" ) \n \n 如果 grade 是50， 會發生什麼 ？ 所有條件均為假，因此 "F" 將其打印在屏幕上。 但是，如果 grade 是95，該怎麼辦？ 然後所有條件都成立，一切都打印出來了，對吧？ 不！ 程序將逐行執行。 滿足第一個條件（等級> = 90），因此程序將輸入 if 語句 內的代碼 ，執行 print("A") 。 一旦執行了條件語句中的代碼，將跳過其餘條件，並且不檢查其他條件。 \n', 'tags': '', 'url': '.html'}, {'title': 'P4-1', 'text': 'DIVISORSE \n \n EXECISE FOUR \n Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don’t know what a \xa0 divisor \xa0 is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.) \n DISCOSIONE \n The topics that you need for this exercise combine lists, conditionals, and user input. There is a new concept of creating lists. \n There is an easy way to programmatically create lists of numbers in Python. \n To create a list of numbers from 2 to 10, just use the following code: \n \n    x   =   range ( 2 ,   11 ) \n \n Then the variable \xa0 x \xa0 will contain the list \xa0 [2, 3, 4, 5, 6, 7, 8, 9, 10] . Note that the second number in the \xa0 range() \xa0 function is not included in the original list. \n Now that \xa0 x \xa0 is a list of numbers, the same for loop can be used with the list: \n \n    for   elem   in   x :  \n     print   elem \n \n Will yield the result: \n \n   2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n  10 \n \n 除數 \n \n 練習4和解決方法 \n 創建一個程序，詢問用戶一個數字，然後打印出該數字的所有除數的列表。 （如果您不知道 除數 是多少，該數字將被除以另一個數。例如，13是26的除數，因為26/13沒有餘數。） \n 討論區 \n 本練習需要的主題包括列表，條件和用戶輸入。 有一個創建列表的新概念。 \n 有一種簡便的方法可以在Python中以編程方式創建數字列表。 \n 要創建2到10的數字列表，只需使用以下代碼： \n \n    x   =   range ( 2 ,   11 ) \n \n 然後，變量 x 將包含列表 [2, 3, 4, 5, 6, 7, 8, 9, 10] 。 請注意， range() 函數 中的第二個數字 不包括在原始列表中。 \n 現在這 x 是一個數字列表，該列表可以使用相同的for循環： \n \n    for   elem   in   x :  \n     print   elem \n \n 將產生結果： \n \n   2 \n  3 \n  4 \n  5 \n  6 \n  7 \n  8 \n  9 \n  10 \n \n', 'tags': '', 'url': 'P4-1.html'}, {'title': 'P5-1', 'text': 'LIST OVER LAPS \n \n EXERCISE FIVE \n Take two lists, say for example these two: \n \n    a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n   b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. \n Extras: \n \n Randomly generate two lists to test this \n Write this in one line of Python (don’t worry if you can’t figure this out at this point - we’ll get to it soon) \n \n LIST PROPERTISE \n In other words, “things you can do with lists.” \n One of the interesting things you can do with lists in Python is figure out whether something is inside the list or not. For example: \n \n   >>> a = [5, 10, 15, 20]\n  >>> 10 in a\n  True\n  >>> 3 in a\n  False \n \n You can of course use this in loops, conditionals, and any other programming constructs. \n \n    list_of_students   =   [ "Michele" ,   "Sara" ,   "Cassie" ] \n\n   name   =   input ( "Type name to check: " ) \n   if   name   in   list_of_students : \n     print ( "This student is enrolled." ) 清單重疊 \n \n 練習五合解決方法 \n 拿兩個列表，舉例來說，這兩個： \n \n    a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n   b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n 並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。 確保您的程序可以在兩個不同大小的列表上運行。 \n 附加功能： \n \n 隨機生成兩個列表進行測試 \n 用Python的一行代碼編寫（不要擔心，如果您現在不能解決這個問題，我們會盡快處理） \n \n 列出屬性 \n 換句話說，“您可以使用列表執行的操作”。 \n 您可以使用Python中的列表進行有趣的操作之一，就是確定列表中是否包含某些內容。 例如： \n \n   >>> a = [5, 10, 15, 20] \n  >>> 10 in a \n  True \n  >>> 3 in a \n  False \n \n 您當然可以在循環，條件和任何其他編程構造中使用它。 \n    list_of_students   =   [ "Michele" ,   "Sara" ,   "Cassie" ] \n\n   name   =   input ( "Type name to check: " ) \n   if   name   in   list_of_students : \n     print ( "This student is enrolled." ) \n \n', 'tags': '', 'url': 'P5-1.html'}, {'title': 'P6-1', 'text': '字串清單 \n 字符串列表索引 \n 練習六和解決方法 \n 向用戶詢問一個字符串，然後打印出該字符串是否是回文。 （ 回文 是指向前和向後讀取相同字符串的字符串。） \n 討論區 \n 本週的概念： \n \n 列表索引 \n 字符串是列表 \n \n 列表索引 \n 在Python（以及大多數通用編程）中，您從數字0開始計數列表。列表中的第一個元素是“數字0”，第二個元素是“數字1”，依此類推。 \n 結果，當您要從列表中刪除單個元素時，可以向列表中請求該number元素： \n \n   >>> a = [5, 10, 15, 20, 25] \n  >>> a[3] \n  20 \n  >>> a[0] \n  5 \n \n 還有一種便捷的方法來獲取兩個索引之間的子列表： \n \n   >>> a = [5, 10, 15, 20, 25, 30, 35, 40] \n  >>> a[1:4] \n  [10, 15, 20] \n  >>> a[6:] \n  [35, 40] \n  >>> a[:-1] \n  [5, 10, 15, 20, 25, 30, 35] \n \n 第一個數字是“開始索引”，最後一個數字是“結束索引”。 \n 您還可以在索引中包含第三個數字，以計算應該從列表中讀取的頻率： \n \n   >>> a = [5, 10, 15, 20, 25, 30, 35, 40] \n  >>> a[1:5:2] \n  [10, 20] \n  >>> a[3:0:-1] \n  [15, 10, 5] \n \n 要閱讀整個列表，只需使用變量名（在上面的示例中 a ），或者也可以 [:] 在變量名的末尾 使用 （在以上示例中的 a[:] ）。 \n 字符串是列表 \n 因為字符串是列表，所以您可以將對列表所做的所有操作都字符串化。 您可以遍歷它們： \n \n    string   =   "example" \n   for   c   in   string :  \n     print   "one letter: "   +   c \n \n 將給出結果： \n \n   one letter: e \n  one letter: x \n  one letter: a \n  one letter: m \n  one letter: p \n  one letter: l \n  one letter: e \n \n 您可以列出子列表： \n \n   >>> string = "example" \n  >>> s = string[0:5] \n  >>> print s \n  examp \n \n 現在，其中 s 包含字符串“ examp”。 \n 故事的寓意：字符串是一個列表。 \n STRING LIST \n strings lists index \n \xa0 \n EXERCISE LIST \n Ask the user for a string and print out whether this string is a palindrome or not. (A \xa0 palindrome \xa0 is a string that reads the same forwards and backwards.) \n DISCUSION \n Concepts for this week: \n \n List indexing \n Strings are lists \n \n \n In Python (and most programming in general), you start counting lists from the number 0. The first element in a list is “number 0”, the second is “number 1”, etc. \n As a result, when you want to get single elements out of a list, you can ask a list for that number element: \n \n   >>> a = [5, 10, 15, 20, 25]\n  >>> a[3]\n  20\n  >>> a[0]\n  5 \n \n There is also a convenient way to get sublists between two indices: \n \n   >>> a = [5, 10, 15, 20, 25, 30, 35, 40]\n  >>> a[1:4]\n  [10, 15, 20]\n  >>> a[6:]\n  [35, 40]\n  >>> a[:-1]\n  [5, 10, 15, 20, 25, 30, 35] \n \n The first number is the “start index” and the last number is the “end index.” \n You can also include a third number in the indexing, to count how often you should read from the list: \n \n   >>> a = [5, 10, 15, 20, 25, 30, 35, 40]\n  >>> a[1:5:2]\n  [10, 20]\n  >>> a[3:0:-1]\n  [15, 10, 5] \n \n To read the whole list, just use the variable name (in the above examples, \xa0 a ), or you can also use \xa0 [:] \xa0 at the end of the variable name (in the above examples, \xa0 a[:] ). \n STRING LISTS \n Because strings are lists, you can do to strings everything that you do to lists. You can iterate through them: \n \n    string   =   "example" \n   for   c   in   string :  \n     print   "one letter: "   +   c \n \n Will give the result: \n \n   one letter: e\n  one letter: x\n  one letter: a\n  one letter: m\n  one letter: p\n  one letter: l\n  one letter: e \n \n You can take sublists: \n \n   >>> string = "example"\n  >>> s = string[0:5]\n  >>> print s\n  examp \n \n Now \xa0 s \xa0 has the string “examp” in it. \n Moral of the story: a string is a list. \n \n', 'tags': '', 'url': 'P6-1.html'}, {'title': 'P10-1', 'text': 'List Overlap comprehensions\n \n Exercise 10 (and \xa0 Solution )\n This week’s exercise is going to be revisiting an old exercise (see \xa0 Exercise 5 ), except require the solution in a different way. \n Take two lists, say for example these two: \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this \xa0 in one line of Python \xa0 using at least one list comprehension . ( Hint: Remember \xa0 list comprehensions \xa0 from Exercise 7 ). \n The original formulation of this exercise said to write the solution using one line of Python, but a few readers pointed out that this was impossible to do without using \xa0 set s that I had not yet discussed on the blog, so you can either choose to use the original directive and read about the \xa0 set \xa0 command in Python 3.3 , or try to implement this on your own and use at least one list comprehension in the solution. \n Extra: \n \n Randomly generate two lists to test this \n \nDiscussion\n Concepts for this week: \n \n List comprehensions \n Random numbers, continued \n \nList comprehensions\n We already discussed list comprehensions in \xa0 Exercise 7 , but they can be made much more complicated. \n For example: \n \n \t x   =   [ 1 ,   2 ,   3 ] \n\t y   =   [ 5 ,   10 ,   15 ] \n\t allproducts   =   [ a * b   for   a   in   x   for   b   in   y ] \n \n At the end of this piece of code, \xa0 allproducts \xa0 will contain the list \xa0 [5, 10, 15, 10, 20, 30, 15, 30, 45] . So you can put multiple for loops inside the comprehension. But you can also add more complicated conditionals: \n \n \t x   =   [ 1 ,   2 ,   3 ] \n\t y   =   [ 5 ,   10 ,   15 ] \n\t customlist   =   [ a * b   for   a   in   x   for   b   in   y   if   a * b % 2   !=   0 ] \n \n Now \xa0 customlist \xa0 contains \xa0 [5, 15, 15, 45] \xa0 because only the odd products are added to the list. \n In general, the list comprehension takes the form: \n \n \t [ EXPRESSION   FOR_LOOPS   CONDITIONALS ] \n \n as shown in the examples above. \nRandom numbers, continued\n Try to use the \xa0 Python random documentation \xa0 to figure out how to generate a random list. As a hint look below: \n \n \t a   =   random . sample ( range ( 100 ),   5 ) \n \n This line of code will leave \xa0 a \xa0 containing a list of 5 random numbers from 0 to 99. \n列表重疊理解 練習10（和 解決方案 ） \n 本週的練習將重溫舊的練習（請參閱 練習5 ），只是需要以其他方式解決。 \n 拿兩個列表，舉例來說，這兩個： \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n 並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。 確保您的程序可以在兩個不同大小的列表上運行。 使用至少一個列表理解 語句在一行Python中 \xa0 編寫 。 （ 提示：記住 練習7中的 列表理解 ）。 \n 此練習的原始表述是使用一行Python編寫解決方案，但是一些讀者指出，如果不使用 set 我尚未在博客上討論過的s， 則不可能做到這一點 ，因此您可以選擇使用原始指令，並閱讀 set Python 3.3中 的 命令 ，或者嘗試自己實現該 指令並 在解決方案中至少使用一個列表理解。 \n 額外： \n \n 隨機生成兩個列表進行測試 \n \n 討論區 \n 本週的概念： \n \n 清單理解 \n 隨機數，續 \n \n 清單理解 \n 我們已經在 練習7中 討論了列表理解 ，但是可以使它們複雜得多。 \n 例如： \n \n \t x   =   [ 1 ,   2 ,   3 ] \n\t y   =   [ 5 ,   10 ,   15 ] \n\t allproducts   =   [ a * b   for   a   in   x   for   b   in   y ] \n \n 在這段代碼的最後， allproducts 將包含list \xa0 [5, 10, 15, 10, 20, 30, 15, 30, 45] 。 因此，您可以在理解中放入多個for循環。 但是您還可以添加更複雜的條件： \n \n \t x   =   [ 1 ,   2 ,   3 ] \n\t y   =   [ 5 ,   10 ,   15 ] \n\t customlist   =   [ a * b   for   a   in   x   for   b   in   y   if   a * b % 2   !=   0 ] \n \n 現在 customlist 包含， [5, 15, 15, 45] 因為僅將奇數產品添加到列表中。 \n 通常，列表理解採用以下形式： \n \n \t [ EXPRESSION   FOR_LOOPS   CONDITIONALS ] \n \n 如以上示例所示。 \n 隨機數，續 \n 嘗試使用 Python隨機文檔 來弄清楚如何生成隨機列表。 提示如下： \n \n \t a   =   random . sample ( range ( 100 ),   5 ) \n \n 這行代碼將 a 包含從0到99的5個隨機數的列表。 \n \n', 'tags': '', 'url': 'P10-1.html'}, {'title': 'P11-1', 'text': 'check primality functions Exercise 11 (and \xa0 Solution )\n Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to \xa0 Exercise 4 \xa0 to help you. Take this opportunity to practice using functions, described below. \nDiscussion\n Concepts for this week: \n \n Functions \n Reusable functions \n Default arguments \n \nFunctions\n One of the tools programming gives us is the ability to break down problems into easier (or perhaps previously solved) or reusable subproblems. It is good practice to have a function have a single purpose, and the name of that function should hint at it’s purpose in some way. \n Most programming languages have this idea of a function, subroutine, or subprogram. In Python, a function is a programming construct that allows exactly that. \n Let’s look at a simple example: \n \n    def   get_integer (): \n     return   int ( input ( "Give me a number: " )) \n \n In this small example, we used the same code that asks a user for input as a tabbed line underneath this \xa0 def \xa0 statement. The \xa0 def \xa0 means that everything tabbed underneath is a function. The name \xa0 get_integer() \xa0 is just a name that I (the programmer) made up. If I just include this code inside a Python file and run it, nothing will happen - all I have done so far is wrapped my code inside of a function; I never told my program to actually RUN my function. \n \n    def   get_integer (): \n     return   int ( input ( "Give me a number: " )) \n\n   age   =   get_integer () \n   school_year   =   get_integer () \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n What I have done here is \xa0 called \xa0 the function (told it to run) by writing \xa0 age = get_integer() . When this line of code runs, what happens is the program will \xa0 execute \xa0 (run) the function by asking me for a number, then \xa0 returning \xa0 it (giving it back to me) by saving it inside the variable \xa0 age . Now when I want to ask the user for another number (this time representing the school year), I do the same thing with the variable \xa0 school_year . \nReusable functions\n This is all well and good, but I can make my function do much more for me. Right now, my function will always ask the user for a number by printing the string \xa0 "Give me a number: " . What if I want to print a different string every time I ask the user for a number, but otherwise use the same idea for the function? In other words, I want a variable parameter in my function that changes every time I call the function based on something I (the programmer) want to be different. \n I can do this by \xa0 passing \xa0 (giving) my function a variable. Like this: \n \n    def   get_integer ( help_text ): \n     return   int ( input ( help_text )) \n \n Now what I can do when I call the function is something like this: \n \n    def   get_integer ( help_text ): \n     return   int ( input ( help_text )) \n\n   age   =   get_integer ( "Tell me your age: " ) \n   school_year   =   get_integer ( "What grade are you in? " ) \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n Now it is easier for a user to use the program, because the help text is different. \n These variables you pass to functions are called \xa0 variables , \xa0 parameters , or \xa0 arguments . \nDefault arguments\n In the example above, once I have added an \xa0 argument \xa0 to my function, I always have to give an argument when I call the function. I can’t forget to give the \xa0 get_integer() \xa0 function from above a string to print to the screen. In some cases, I want there to be a “default” behavior for my function that happens when I create an argument for it but don’t give it any. \n In the example above, if I don’t give a custom string (which may be 95% of the time I use this function), I just want the \xa0 input() \xa0 line to say \xa0 "Give me a number: " \xa0 and I want to save myself the trouble of writing this every single time I call the function. So what I can do is give my function \xa0 default arguments . Like so: \n \n    def   get_integer ( help_text = "Give me a number: " ): \n     return   int ( input ( help_text )) \n \n What happens now is I can use the function in two ways: by giving it an argument and by NOT giving it an argument. \n \n    def   get_integer ( help_text = "Give me a number: " ): \n     return   int ( input ( help_text )) \n\n   age   =   get_integer ( "Tell me your age: " ) \n   school_year   =   get_integer () \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n The first time I call the function, it will print \xa0 "Tell me your age: " , but the second time, it will print \xa0 "Give me a number: " , because I did not give it a string and it will execute the default behavior. \nRecap\n What a function does is wrap a piece of code that we want to reuse, labels it, and allows us to use it again relatively easily. You can add variables to the functions to make your code even MORE reusable, and you can add default arguments to these variables. \n Functions are a bit strange to deal with at first, but once you master them, they will be your savior in programming. Besides, the whole point of learning programming is abstraction, problem solving, breaking down problems, and that’s exactly what functions are all about. \n檢查基本功能\n 練習11（和 解決方案 ） \n 向用戶詢問一個數字，並確定該數字是否為質數。 （對於那些忘記的人，質數是沒有除數的數。） 您可以（並且應該！）使用 練習4 的答案 來幫助您。 藉此機會練習使用如下所述的功能。 \n 討論區 \n 本週的概念： \n \n 職能 \n 可重用功能 \n 默認參數 \n 職能 \n \n 編程提供給我們的工具之一是能夠將問題分解為更簡單（或可能先前解決）或可重用的子問題。 優良作法是使一個函數具有單一目的，並且該函數的名稱應以某種方式暗示其目的。 \n 大多數編程語言都具有函數，子例程或子程序的概念。 在Python中，函數是一種允許這樣做的編程構造。 \n 讓我們看一個簡單的例子： \n \n    def   get_integer (): \n     return   int ( input ( "Give me a number: " )) \n \n 在這個小示例中，我們使用了相同的代碼來要求用戶輸入此 def 語句 下方的選項卡行 。 的 def 手段，一切選項卡式下面是一個函數。 這個名字 get_integer() 只是我（程序員）組成的名字。 如果我只是將此代碼包含在Python文件中並運行它，則將不會發生任何事情-到目前為止，我所做的一切都將我的代碼包裝在一個函數中； 我從未告訴過我的程序實際運行我的功能。 \n \n    def   get_integer (): \n     return   int ( input ( "Give me a number: " )) \n \n   age   =   get_integer () \n   school_year   =   get_integer () \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n 我在這裡所做的事情 通過編寫 稱為 函數（告訴它運行） age = get_integer() 。 當這行代碼運行時，程序將 通過詢問我一個數字 來 執行 （運行）該函數，然後 將 其保存在變量中以將其 返回 （返還給我） age 。 現在，當我想問用戶另一個數字（這次代表學年）時，我對變量做了同樣的事情 school_year 。 \n 可重用功能 \n 這一切都很好，但是我可以讓我的功能為我做更多的事情。 現在，我的函數將始終通過打印字符串向用戶詢問一個數字 "Give me a number: " 。 如果我想每次問用戶一個數字時都想打印一個不同的字符串，但對於該函數使用相同的想法怎麼辦？ 換句話說，我希望函數中的變量參數在每次調用函數時都根據我（程序員）希望與眾不同的事物而改變。 \n 我可以通過 傳遞 （給我的）函數一個變量 來做到這一點 。 像這樣： \n \n    def   get_integer ( help_text ): \n     return   int ( input ( help_text )) \n \n 現在，我在調用該函數時可以執行的操作如下： \n \n    def   get_integer ( help_text ): \n     return   int ( input ( help_text )) \n \n   age   =   get_integer ( "Tell me your age: " ) \n   school_year   =   get_integer ( "What grade are you in? " ) \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n 現在，由於幫助文本不同，因此使用戶更容易使用該程序。 \n 傳遞給函數的這些變量稱為 變量 ， 參數 或 參數 。 \n 默認參數 \n 在上面的示例中，在 向函數 添加 參數後 ，在調用函數時始終必須提供參數。 我不能忘記 get_integer() 從字符串上方 給 函數打印到屏幕上。 在某些情況下，我希望函數有一種“默認”行為，這種行為會在為它創建參數但不給出任何參數時發生。 \n 在上面的示例中，如果我不提供自定義字符串（可能占我使用此函數的時間的95％），我只想讓 input() 行說出來， "Give me a number: " 並且省去了每次編寫此 字符串 的麻煩我稱這個功能。 所以我能做的就是給我的函數 默認參數 。 像這樣： \n \n    def   get_integer ( help_text = "Give me a number: " ): \n     return   int ( input ( help_text )) \n \n 現在發生的事情是我可以通過兩種方式使用該函數：通過給它一個參數和不給它一個參數。 \n \n    def   get_integer ( help_text = "Give me a number: " ): \n     return   int ( input ( help_text )) \n \n   age   =   get_integer ( "Tell me your age: " ) \n   school_year   =   get_integer () \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n 第一次調用該函數，它將打印 "Tell me your age: " ，但是第二次，它將打印 "Give me a number: " ，因為我沒有給它一個字符串，它將執行默認行為。 \n \n', 'tags': '', 'url': 'P11-1.html'}, {'title': 'P12-1', 'text': 'List ends \n Exercise 12 (and \xa0 Solution )\n Write a program that takes a list of numbers (for example, \xa0 a = [5, 10, 15, 20, 25] ) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function. \nConcepts to practice\n \n Lists and properties of lists \n List comprehensions (maybe) \n Functions \n \n \n 清單結尾 \n 練習12（和 解決方案 ） \n \n 編寫一個程序，該程序接受一個數字列表（例如 a = [5, 10, 15, 20, 25] ），並製作一個僅包含給定列表的第一個和最後一個元素的新列表。 為了練習，請在函數內編寫此代碼。 \n 練習概念 \n \n 列表和列表屬性 \n 列表理解（也許） \n 職能 \n List Overlap Comprehensions Solutions P10 AII solutions \xa0 Exercise 10 \n This week’s exercise is going to be revisiting an old exercise (see \xa0 Exercise 5 ), except require the solution in a different way. \n Take two lists, say for example these two: \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this \xa0 using at least one list comprehension . ( Hint: Remember \xa0 list comprehensions \xa0 from Exercise 7 ). \n Extra: \n \n Randomly generate two lists to test this \n \nSample solution\n A user-submitted solution: \n \n \n \n \n \n \n \n \n \n \n import random \n \n \n \n \n \n \n \n a = random.sample(range(1,30), 12) \n \n \n \n b = random.sample(range(1,30), 16) \n \n \n \n result = [i for i in a if i in b] \n \n \n \n \n \n \n \n view raw Exercise 10 \xa0 hosted with ❤ by \xa0 GitHub \n \n \n As a few commenters / readers of this blog have pointed out (thanks mainly to Gautam and Jeff), the exercise as posed is actually impossible to write in a single line of Python. The problem is this: the proposed reader solution (and the solution that I had in mind myself) as written above does not take into account the fact that there might be duplicates in the resulting list, where I specifically asked to not include duplicates. This means that in the simple example I gave above, \xa0 a ’s first element is \xa0 1 \xa0 will be added to the \xa0 result \xa0 list because it is in \xa0 b . But then it’s next element is also \xa0 1 , and is also in \xa0 b , so will be added to the \xa0 result \xa0 list. So the solution as given (the comprehension \xa0 [i for i in a if i in b] ) will not yield the correct result on the example solution. \n Instead, as pointed out by Gautam and Jeff, the simplest way to achieve this solution would be to make sure that we are only looking at unique elements from \xa0 a , the first list in the comprehension. We have not discussed doing this easily in Python on this blog using the \xa0 set \xa0 built-in function, but if you know it, the solution will look like this: \n \n \n \n \n \n \n \n \n \n \n import \xa0 random \n \n \n \n a \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 12 ) \n \n \n \n b \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 16 ) \n \n \n \n result \xa0 = \xa0 [ i \xa0 for \xa0 i \xa0 in \xa0 set ( a ) \xa0 if \xa0 i \xa0 in \xa0 b ] \n \n \n \n \n \n \n \n view raw list-overlap-comprehensions.py \xa0 hosted with ❤ by \xa0 GitHub \n \n \n But, to achieve the same results as asked in the original question while still using a list comprehension (however, definitely not using a single line of code), would be to make sure that there is no overlap in the new list after it is constructed, using the traditional \xa0 for \xa0 loop on lists: \n \n \n \n \n \n \n \n \n \n \n import \xa0 random \n \n \n \n a \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 12 ) \n \n \n \n b \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 16 ) \n \n \n \n result_overlap \xa0 = \xa0 [ i \xa0 for \xa0 i \xa0 in \xa0 set ( a ) \xa0 if \xa0 i \xa0 in \xa0 b ] \n \n \n \n result \xa0 = \xa0 [] \n \n \n \n for \xa0 element \xa0 in \xa0 result_overlap : \n \n \n \n if \xa0 element \xa0 not \xa0 in \xa0 result : \n \n \n \n result . appent ( element ) \n \n \n \n \n \n \n \n view raw list-overlap-comprehensions-for.py \xa0 hosted with ❤ by \xa0 GitHub \n \n \n Or, to practice list comprehensions again, this can be done with two list comprehensions: \n \n \n \n \n \n \n \n \n \n \n import \xa0 random \n \n \n \n a \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 12 ) \n \n \n \n b \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 16 ) \n \n \n \n result_overlaps \xa0 = \xa0 [ i \xa0 for \xa0 i \xa0 in \xa0 set ( a ) \xa0 if \xa0 i \xa0 in \xa0 b ] \n \n \n \n result \xa0 = \xa0 [ i \xa0 for \xa0 i \xa0 in \xa0 result_overlaps \xa0 if \xa0 result_overlaps . count ( i ) \xa0 == \xa0 1 ] \n \n \n \n \n \n \n \n view raw \n \n 本週的練習將重溫舊的練習（請參閱 練習5 ），只是需要以其他方式解決。 \n 拿兩個列表，舉例來說，這兩個： \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n 並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。 確保您的程序可以在兩個不同大小的列表上運行。 至少使用一個列表理解來 寫這個 。 （ 提示：記住 練習7中的 列表理解 ）。 \n 額外： \n \n 隨機生成兩個列表進行測試 \n \n 樣品溶液 \n 用戶提交的解決方案： \n \n \n \n \n \n \n \n \n \n \n 隨機導入 \n \n \n \n \n \n \n \n 一個= random.sample（range（1,30），12） \n \n \n \n b = random.sample（範圍（1,30），16） \n \n \n \n 結果= [如果b中有i，則a中的i代表i] \n \n \n \n \n \n \n \n 查看原始 練習10 \xa0 由 GitHub託管 \n \n \n 正如該博客的一些評論者/讀者所指出的（主要感謝Gautam和Jeff），所提出的練習實際上不可能用Python編寫。 問題是這樣的：上面寫的建議的閱讀器解決方案（以及我自己想到的解決方案）沒有考慮到結果列表中可能存在重複項的事實，我特別要求不要包含重複項。 這意味著在我上面給出的簡單示例中， a 第一個元素 1 將被添加到 result 列表中，因為它在中 b 。 但隨後它的下一個元素也是 1 ，並且也在 b ，因此將被添加到 result 列表中。 因此，給定的解決方案（comprehension \xa0 [i for i in a if i in b] ）將無法在示例解決方案上產生正確的結果。 \n 相反，正如Gautam和Jeff所指出的那樣，實現此解決方案的最簡單方法是確保僅查看來自 a 理解中第一個列表的 唯一元素 。 我們沒有在此博客上使用 set 內置函數 討論在Python中輕鬆實現此操作的 方法，但是如果您知道，解決方案將如下所示： \n \n \n \n \n \n \n \n \n \n \n 隨機 導入 \n \n \n \n a \xa0 = \xa0 隨機的 。 樣品 （ 範圍 （ 1 ， 30 ）， 12 ） \n \n \n \n b \xa0 = \xa0 隨機 。 樣品 （ 範圍 （ 1 ， 30 ）， 16 ） \n \n \n \n 導致 \xa0 = \xa0 [ 我 \xa0 為 \xa0 我 \xa0 在 \xa0 集 （ 一 ） 如果 \xa0 我 \xa0 在 \xa0 b \xa0 ] \n \n \n \n \n \n \n \n 查看原始 list-overlap-comprehensions.py \xa0 託管與❤通過 GitHub上 \n \n \n 但是，要在仍然使用列表理解的情況下達到與原始問題相同的結果（但是，絕對不要使用一行代碼），將確保新列表在構建後沒有重疊，使用 for 列表上 的傳統 循環： \n \n \n \n \n \n \n \n \n \n \n 隨機 導入 \n \n \n \n a \xa0 = \xa0 隨機的 。 樣品 （ 範圍 （ 1 ， 30 ）， 12 ） \n \n \n \n b \xa0 = \xa0 隨機 。 樣品 （ 範圍 （ 1 ， 30 ）， 16 ） \n \n \n \n result_overlap \xa0 = \xa0 [ 我 \xa0 為 \xa0 我 \xa0 在 \xa0 集 （ 一 ） 如果 \xa0 我 \xa0 在 \xa0 b \xa0 ] \n \n \n \n 結果 \xa0 = \xa0 [] \n \n \n \n 對於 \xa0 元件 \xa0 在 \xa0 result_overlap ： \n \n \n \n 如果 \xa0 要素 \xa0 不能 \xa0 在 \xa0 結果 ： \n \n \n \n 結果 。 出現 （ 元素 ） \n \n \n \n \n \n \n \n 查看原始 list-overlap-comprehensions-for.py \xa0 託管與❤通過 GitHub上 \n \n \n 或者，要再次練習列表推導，可以使用兩個列表推導來完成： \n \n \n \n \n \n \n \n \n \n \n 隨機 導入 \n \n \n \n a \xa0 = \xa0 隨機的 。 樣品 （ 範圍 （ 1 ， 30 ）， 12 ） \n \n \n \n b \xa0 = \xa0 隨機 。 樣品 （ 範圍 （ 1 ， 30 ）， 16 ） \n \n \n \n result_overlaps \xa0 = \xa0 [ 我 \xa0 為 \xa0 我 \xa0 在 \xa0 集 （ 一 ） 如果 \xa0 我 \xa0 在 \xa0 b \xa0 ] \n \n \n \n 導致 \xa0 = \xa0 [ 我 \xa0 為 \xa0 我 \xa0 在 \xa0 result_overlaps \xa0 如果 \xa0 result_overlaps 。 數 （ i ） == \xa0 1 \xa0 ] \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'P12-1.html'}, {'title': 'H3(All Solutions)', 'text': '', 'tags': '', 'url': 'H3(All Solutions).html'}, {'title': 'P1', 'text': 'CHARACTER IN PUT SOLUTION \n \n Because I cannot include every single submission I get, I will choose one or two that are example answers and include those within each post. \n EXERCISE 1 \n Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old. \n 輸入解決方案 \n 由於我無法將收到的每份意見書都包括在內，因此我將選擇一個或兩個作為示例答案，並在每個帖子中包括這些答案。 \n 練習1 \n 創建一個程序，要求用戶輸入他們的姓名和年齡。 打印給他們的消息，告訴他們他們將滿100歲的年份。 \n', 'tags': '', 'url': 'P1.html'}, {'title': 'P2', 'text': 'ODD OR EVEN SOLUTIONS \n EXERCISES 2 \n Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user. \n Hint: how does an even / odd number react differently when divided by 2? \n Extras: \n \n If the number is a multiple of 4, print out a different message. \n Ask the user for two numbers: one number to check (call it \xa0 num ) and one number to divide by ( check ). If \xa0 check \xa0 divides evenly into \xa0 num , tell that to the user. If not, print a different appropriate message. \n \n SAMPLE SOLUTION \n There are many ways of doing the exercise, so I am posting a few sample solutions. The very basics: \n \n \n \n \n \n \n \n \n \n \n num = input("Enter a number: ") \n \n \n \n mod = num % 2 \n \n \n \n if mod > 0: \n \n \n \n print("You picked an odd number.") \n \n \n \n else: \n \n \n \n print("You picked an even number.") \n \n \n \n \n \n \n \n view raw 02 \xa0 hosted with ❤ by \xa0 GitHub \n \n \n And something that looks slightly more complex (but is just a more complicated conditional): \n \n \n \n \n \n \n \n \n \n \n num = int(input("give me a number to check: ")) \n \n \n \n check = int(input("give me a number to divide by: ")) \n \n \n \n \n \n \n \n if num % 4 == 0: \n \n \n \n print(num, "is a multiple of 4") \n \n \n \n elif num % 2 == 0: \n \n \n \n print(num, "is an even number") \n \n \n \n else: \n \n \n \n print(num, "is an odd number") \n \n \n \n \n \n \n \n if num % check == 0: \n \n \n \n print(num, "divides evenly by", check) \n \n \n \n else: \n \n \n \n print(num, "does not divide evenly by", check) \n \n \n \n \n \n \n \n \n \n 基數或偶數解 \n 練習2 \n 詢問用戶一個數字。 根據數字是偶數還是奇數，向用戶打印一條適當的消息。 \n 提示：偶數/奇數除以2時的反應如何？ \n 附加功能： \n \n 如果數字是4的倍數，請打印出另一條消息。 \n 向用戶詢問兩個數字：一個數字要檢查（稱為 num ），另一個數字要除以（ check ）。 如果 check 平均分為 num ，請告知用戶。 如果不是，請打印其他適當的消息。 \n \n 樣品 \n 進行練習的方法有很多，因此我將發布一些示例解決方案。 基本知識： \n \n \n \n \n \n \n \n \n \n \n num = input（“輸入數字：”） \n \n \n \n mod = num％2 \n \n \n \n 如果mod> 0： \n \n \n \n  打印（“您選擇了一個奇數。”） \n \n \n \n 其他： \n \n \n \n  打印（“您選擇了一個偶數。”） \n \n \n \n \n \n \n \n 查看原始 02 \xa0 通過託管與❤ \xa0 GitHub上 \n \n \n 看起來稍微複雜一些（但只是條件更複雜）： \n \n \n \n \n \n \n \n \n \n \n num = int（input（“給我一個要檢查的數字：”）） \n \n \n \n check = int（input（“給我一個數字除以：”）） \n \n \n \n \n \n \n \n 如果num％4 == 0： \n \n \n \n  print（num，“是4的倍數”） \n \n \n \n elif num％2 == 0： \n \n \n \n  打印（數字，“是偶數”） \n \n \n \n 其他： \n \n \n \n  print（num，“是一個奇數”） \n \n \n \n \n \n \n \n 如果num％check == 0： \n \n \n \n  打印（數字，“均分”，選中） \n \n \n \n 其他： \n \n \n \n  打印（數字，“不均勻地除以”，檢查） \n \n \n \n', 'tags': '', 'url': 'P2.html'}, {'title': 'P3-2', 'text': 'LIST LESS THAN SOLUTIONS TEN \n EXERCISE \n Take a list, say for example this one: \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n \n and write a program that prints out all the elements of the list that are less than 5. \n Extras: \n \n Instead of printing the elements one by one, make a new list that has all the elements less than 5 from this list in it and print out this new list. \n Write this in one line of Python. \n Ask the user for a number and return a list that contains only elements from the original list \xa0 a \xa0 that are smaller than that number given by the user. \n \n SAMPALE SOLUTION \n I will note that none of the solutions that were submitted were written in one line of Python. There will be more exercises later that show you how to do this! \n Here is a sample solution that solves the exercise, including extras 1 and 3. \n 列出少於10個解決方案 \n 練習3 \n 拿一個清單，例如說一個： \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n \n 並編寫一個程序，打印出列表中小於5的所有元素。 \n 附加功能： \n \n 而不是一個一個地打印元素，而是創建一個新列表，其中該列表中的所有元素少於5個，然後打印出該新列表。 \n 用一行Python編寫。 \n 向用戶詢問一個數字，然後返回一個列表，該列表僅包含原始列表 a 中小於用戶給定數字的 元素 。 \n \n 樣品 \n 溶液 我將注意到，提交的解決方案都不是用Python的一行編寫的。 稍後會有更多練習向您展示如何執行此操作！ \n 這是解決該練習的示例解決方案，包括附加功能1和3。 \n', 'tags': '', 'url': 'P3-2.html'}, {'title': 'P4-2', 'text': 'EXERCISE 4 \n SAMPALE SOLUTION \n Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don’t know what a \xa0 divisor \xa0 is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.) \n \n \n \n \n \n \n \n \n \n \n \n __author__ = \'jeffreyhunt\' \n \n \n \n \n \n \n \n num = int(input("Please choose a number to divide: ")) \n \n \n \n \n \n \n \n listRange = list(range(1,num+1)) \n \n \n \n \n \n \n \n divisorList = [] \n \n \n \n \n \n \n \n for number in listRange: \n \n \n \n if num % number == 0: \n \n \n \n divisorList.append(number) \n \n \n \n \n \n \n \n print(divisorList) \n \n \n \n \n \n \n \n view raw Practice Python - Excersise 4: Divisors \xa0 hosted with ❤ by \xa0 GitHub \n \n \n There were a number of tricky things with this exercise. First, the type conversions between input strings and integers for the \xa0 range() \xa0 function need to be carefully output. Second, the arguments to \xa0 range() \xa0 had to be carefully constructed to cover all the possible numbers. Third, the condition in the \xa0 if \xa0 statement had to be correct as well. \n 除數解決方案 \n 練習4 \n \n 數解決方案 創建一個程序，詢問用戶一個數字，然後打印出該數字的所有除數的列表。 （如果您不知道 除數 是多少，它是一個平均除以另一個數的數字。例如，13是26的除數，因為26/13沒有餘數。） \n 樣品 \n \n \n \n \n \n \n \n \n \n \n __author__ =\'jeffreyhunt\' \n \n \n \n \n \n \n \n num = int（input（“請選擇一個要除的數字：”）） \n \n \n \n \n \n \n \n listRange = list（範圍（1，num + 1）） \n \n \n \n \n \n \n \n divisorList = [] \n \n \n \n \n \n \n \n 用於listRange中的數字： \n \n \n \n  如果num％number == 0： \n \n \n \n  divisorList.append（number） \n \n \n \n \n \n \n \n 打印（divisorList） \n \n \n \n \n \n \n \n 查看原始 實踐Python的- Excersise 4：除數 \xa0 託管與❤通過 GitHub上 \n \n \n 這項練習有很多棘手的事情。 首先， range() 需要仔細輸出函數的 輸入字符串和整數之間的類型轉換 。 其次， range() 必須仔細構造 論據以 涵蓋所有可能的數字。 第三， if 聲明中 的條件 也必須正確。 \n', 'tags': '', 'url': 'P4-2.html'}, {'title': 'P5-2', 'text': 'LIST OVERLAP SOLUTIONS \n EXERCISE 5 \n Take two lists, say for example these two: \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. \n 列表重疊解決方案 \n 練習5 \n 拿兩個列表，舉例來說，這兩個： \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n 並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。 確保您的程序可以在兩個不同大小的列表上運行。 \n', 'tags': '', 'url': 'P5-2.html'}, {'title': 'P6-2', 'text': '\n \n \n \n STRING LIST SOLUTIONS \n \n \n \n \n \n EXCERCISE5 \n Ask the user for a string and print out whether this string is a palindrome or not. (A \xa0 palindrome \xa0 is a string that reads the same forwards and backwards.) \n SAMPLE SOLUTIONS \n \n \n \n \n \n \n \n \n \n \n wrd=input("Please enter a word") \n \n \n \n wrd=str(wrd) \n \n \n \n rvs=wrd[::-1] \n \n \n \n print(rvs) \n \n \n \n if wrd == rvs: \n \n \n \n print("This word is a palindrome") \n \n \n \n else: \n \n \n \n print("This word is not a palindrome") \n \n \n \n \n \n \n \n view raw Palinfrome Test! \xa0 hosted with ❤ by \xa0 GitHub \n \n \n \n \n \n \n \n \n \n \n \n \n def   reverse ( word ): \n \n \n \n x   =   \'\' \n \n \n \n for   i   in   range ( len ( word )): \n \n \n \n x   +=   word [ len ( word ) - 1 - i ] \n \n \n \n return   x \n \n \n \n \n \n \n \n word   =   input ( \'give me a word: \\n \' ) \n \n \n \n x   =   reverse ( word ) \n \n \n \n if   x   ==   word : \n \n \n \n print ( \'This is a Palindrome\' ) \n \n \n \n else : \n \n \n \n print ( \'This is NOT a Palindrome\' ) \n \n \n \n \n \n \n \n \n \n \n 字串列表解決方案 \n 練習6 \n 向用戶詢問一個字符串，然後打印出該字符串是否是回文。 （ 回文 是指向前和向後讀取相同字符串的字符串。） \n 樣品 \n \n \n \n \n \n \n \n \n \n \n wrd = input（“請輸入一個單詞”） \n \n \n \n wrd = str（wrd） \n \n \n \n rvs = wrd [::-1] \n \n \n \n 打印（rvs） \n \n \n \n 如果wrd == rvs： \n \n \n \n  打印（“這個詞是回文”） \n \n \n \n 其他： \n \n \n \n  打印（“此詞不是回文”） \n \n \n \n \n \n \n \n 查看原始 Palinfrome測試！ \xa0 由 GitHub 託管於❤ \n \n \n \n \n \n \n \n \n \n \n \n \n def   反向 （ 單詞 ）： \n \n \n \n x    =    \'\' \n \n \n \n 對於   我   在   範圍 （ len個 （ 字 ））： \n \n \n \n X    + =   字 [  len個 （ 字 ） -  1  - 我 ] \n \n \n \n 返回   x \n \n \n \n \n \n \n \n 單詞   =   輸入 （ “給我一個單詞： \\ n  ” ） \n \n \n \n x    =   反向 （ 單詞 ） \n \n \n \n 如果   x    ==    word ： \n \n \n \n 打印 （ “這是回文” ） \n \n \n \n 其他 ： \n \n \n \n 打印 （ “這不是回文” ） \n \n \n \n \n', 'tags': '', 'url': 'P6-2.html'}, {'title': 'P10-2', 'text': 'List Overlap Comprehensions Solutions\n \n Exercise 10 \n This week’s exercise is going to be revisiting an old exercise (see \xa0 Exercise 5 ), except require the solution in a different way. \n Take two lists, say for example these two: \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this \xa0 using at least one list comprehension . ( Hint: Remember \xa0 list comprehensions \xa0 from Exercise 7 ). \n Extra: \n \n Randomly generate two lists to test this \n \nSample solution\n A user-submitted solution: \n \n \n \n \n \n \n \n \n \n \n import random \n \n \n \n \n \n \n \n a = random.sample(range(1,30), 12) \n \n \n \n b = random.sample(range(1,30), 16) \n \n \n \n result = [i for i in a if i in b] \n \n \n \n \n \n \n \n view raw Exercise 10 \xa0 hosted with ❤ by \xa0 GitHub \n \n \n As a few commenters / readers of this blog have pointed out (thanks mainly to Gautam and Jeff), the exercise as posed is actually impossible to write in a single line of Python. The problem is this: the proposed reader solution (and the solution that I had in mind myself) as written above does not take into account the fact that there might be duplicates in the resulting list, where I specifically asked to not include duplicates. This means that in the simple example I gave above, \xa0 a ’s first element is \xa0 1 \xa0 will be added to the \xa0 result \xa0 list because it is in \xa0 b . But then it’s next element is also \xa0 1 , and is also in \xa0 b , so will be added to the \xa0 result \xa0 list. So the solution as given (the comprehension \xa0 [i for i in a if i in b] ) will not yield the correct result on the example solution. \n Instead, as pointed out by Gautam and Jeff, the simplest way to achieve this solution would be to make sure that we are only looking at unique elements from \xa0 a , the first list in the comprehension. We have not discussed doing this easily in Python on this blog using the \xa0 set \xa0 built-in function, but if you know it, the solution will look like this: \n \n \n \n \n \n \n \n \n \n \n import \xa0 random \n \n \n \n a \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 12 ) \n \n \n \n b \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 16 ) \n \n \n \n result \xa0 = \xa0 [ i \xa0 for \xa0 i \xa0 in \xa0 set ( a ) \xa0 if \xa0 i \xa0 in \xa0 b ] \n \n \n \n \n \n \n \n view raw list-overlap-comprehensions.py \xa0 hosted with ❤ by \xa0 GitHub \n \n \n But, to achieve the same results as asked in the original question while still using a list comprehension (however, definitely not using a single line of code), would be to make sure that there is no overlap in the new list after it is constructed, using the traditional \xa0 for \xa0 loop on lists: \n \n \n \n \n \n \n \n \n \n \n import \xa0 random \n \n \n \n a \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 12 ) \n \n \n \n b \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 16 ) \n \n \n \n result_overlap \xa0 = \xa0 [ i \xa0 for \xa0 i \xa0 in \xa0 set ( a ) \xa0 if \xa0 i \xa0 in \xa0 b ] \n \n \n \n result \xa0 = \xa0 [] \n \n \n \n for \xa0 element \xa0 in \xa0 result_overlap : \n \n \n \n if \xa0 element \xa0 not \xa0 in \xa0 result : \n \n \n \n result . appent ( element ) \n \n \n \n \n \n \n \n view raw list-overlap-comprehensions-for.py \xa0 hosted with ❤ by \xa0 GitHub \n \n \n Or, to practice list comprehensions again, this can be done with two list comprehensions: \n \n \n \n \n \n \n \n \n \n \n import \xa0 random \n \n \n \n a \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 12 ) \n \n \n \n b \xa0 = \xa0 random . sample ( range ( 1 , 30 ), \xa0 16 ) \n \n \n \n result_overlaps \xa0 = \xa0 [ i \xa0 for \xa0 i \xa0 in \xa0 set ( a ) \xa0 if \xa0 i \xa0 in \xa0 b ] \n \n \n \n result \xa0 = \xa0 [ i \xa0 for \xa0 i \xa0 in \xa0 result_overlaps \xa0 if \xa0 result_overlaps . count ( i ) \xa0 == \xa0 1 ] \n \n \n \n \n \n \n \n view raw \n \n \n 練習10 \n 本週的練習將重溫舊的練習（請參閱 練習5 ），只是需要以其他方式解決。 \n 拿兩個列表，舉例來說，這兩個： \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n 並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。 確保您的程序可以在兩個不同大小的列表上運行。 至少使用一個列表理解來 寫這個 。 （ 提示：記住 練習7中的 列表理解 ）。 \n 額外： \n \n 隨機生成兩個列表進行測試 \n \n 樣品溶液 \n 用戶提交的解決方案： \n \n \n \n \n \n \n \n \n \n \n 隨機導入 \n \n \n \n \n \n \n \n 一個= random.sample（range（1,30），12） \n \n \n \n b = random.sample（範圍（1,30），16） \n \n \n \n 結果= [如果b中有i，則a中的i代表i] \n \n \n \n \n \n \n \n 查看原始 練習10 \xa0 由 GitHub託管 \n \n \n 正如該博客的一些評論者/讀者所指出的（主要感謝Gautam和Jeff），所提出的練習實際上不可能用Python編寫。 問題是這樣的：上面寫的建議的閱讀器解決方案（以及我自己想到的解決方案）沒有考慮到結果列表中可能存在重複項的事實，我特別要求不要包含重複項。 這意味著在我上面給出的簡單示例中， a 第一個元素 1 將被添加到 result 列表中，因為它在中 b 。 但隨後它的下一個元素也是 1 ，並且也在 b ，因此將被添加到 result 列表中。 因此，給定的解決方案（comprehension \xa0 [i for i in a if i in b] ）將無法在示例解決方案上產生正確的結果。 \n 相反，正如Gautam和Jeff所指出的那樣，實現此解決方案的最簡單方法是確保僅查看來自 a 理解中第一個列表的 唯一元素 。 我們沒有在此博客上使用 set 內置函數 討論在Python中輕鬆實現此操作的 方法，但是如果您知道，解決方案將如下所示： \n \n \n \n \n \n \n \n \n \n \n 隨機 導入 \n \n \n \n a \xa0 = \xa0 隨機的 。 樣品 （ 範圍 （ 1 ， 30 ）， 12 ） \n \n \n \n b \xa0 = \xa0 隨機 。 樣品 （ 範圍 （ 1 ， 30 ）， 16 ） \n \n \n \n 導致 \xa0 = \xa0 [ 我 \xa0 為 \xa0 我 \xa0 在 \xa0 集 （ 一 ） 如果 \xa0 我 \xa0 在 \xa0 b \xa0 ] \n \n \n \n \n \n \n \n 查看原始 list-overlap-comprehensions.py \xa0 託管與❤通過 GitHub上 \n \n \n 但是，要在仍然使用列表理解的情況下達到與原始問題相同的結果（但是，絕對不要使用一行代碼），將確保新列表在構建後沒有重疊，使用 for 列表上 的傳統 循環： \n \n \n \n \n \n \n \n \n \n \n 隨機 導入 \n \n \n \n a \xa0 = \xa0 隨機的 。 樣品 （ 範圍 （ 1 ， 30 ）， 12 ） \n \n \n \n b \xa0 = \xa0 隨機 。 樣品 （ 範圍 （ 1 ， 30 ）， 16 ） \n \n \n \n result_overlap \xa0 = \xa0 [ 我 \xa0 為 \xa0 我 \xa0 在 \xa0 集 （ 一 ） 如果 \xa0 我 \xa0 在 \xa0 b \xa0 ] \n \n \n \n 結果 \xa0 = \xa0 [] \n \n \n \n 對於 \xa0 元件 \xa0 在 \xa0 result_overlap ： \n \n \n \n 如果 \xa0 要素 \xa0 不能 \xa0 在 \xa0 結果 ： \n \n \n \n 結果 。 出現 （ 元素 ） \n \n \n \n \n \n \n \n 查看原始 list-overlap-comprehensions-for.py \xa0 託管與❤通過 GitHub上 \n \n \n 或者，要再次練習列表推導，可以使用兩個列表推導來完成： \n \n \n \n \n \n \n \n \n \n \n 隨機 導入 \n \n \n \n a \xa0 = \xa0 隨機的 。 樣品 （ 範圍 （ 1 ， 30 ）， 12 ） \n \n \n \n b \xa0 = \xa0 隨機 。 樣品 （ 範圍 （ 1 ， 30 ）， 16 ） \n \n \n \n result_overlaps \xa0 = \xa0 [ 我 \xa0 為 \xa0 我 \xa0 在 \xa0 集 （ 一 ） 如果 \xa0 我 \xa0 在 \xa0 b \xa0 ] \n \n \n \n 導致 \xa0 = \xa0 [ 我 \xa0 為 \xa0 我 \xa0 在 \xa0 result_overlaps \xa0 如果 \xa0 result_overlaps 。 數 （ i ） == \xa0 1 \xa0 ] \n \n \n \n \n \n \n \n 查看原始 list-overlap-comprehensions-2.py \xa0 託管與❤通過 GitHub上 \n \n \n 分享樂趣！ \n \n', 'tags': '', 'url': 'P10-2.html'}, {'title': 'P11-2', 'text': 'Check Primality Functions Solutions \n \n Exercise 11 \n Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to \xa0 Exercise 4 \xa0 to help you. \n Sample solution \n There are many ways of solving this problem, so here are a sample solutions: \n This one is a different breakdown of functions to solve the problem. The strings between three \xa0 \'\'\' \xa0 marks are comments in the code that describe what each function does. \n \n \n \n \n \n \n \n \n \n \n def \xa0 get_number ( prompt ): \n \n \n \n \'\'\'Returns integer value for input. Prompt is displayed text\'\'\' \n \n \n \n return \xa0 int ( input ( prompt )) \n \n \n \n \n \n \n \n \n \n \n \n def \xa0 is_prime ( number ): \n \n \n \n \'\'\'Returns True for prime numbers, False otherwise\'\'\' \n \n \n \n #Edge Cases \n \n \n \n if \xa0 number \xa0 == \xa0 1 : \n \n \n \n prime \xa0 = \xa0 False \n \n \n \n elif \xa0 number \xa0 == \xa0 2 : \n \n \n \n prime \xa0 = \xa0 True \n \n \n \n #All other primes \n \n \n \n else : \n \n \n \n prime \xa0 = \xa0 True \n \n \n \n for \xa0 check_number \xa0 in \xa0 range ( 2 , ( number \xa0 / \xa0 2 ) + 1 ): \n \n \n \n if \xa0 number \xa0 % \xa0 check_number \xa0 == \xa0 0 : \n \n \n \n prime \xa0 = \xa0 False \n \n \n \n break \n \n \n \n return \xa0 prime \n \n \n \n \n \n \n \n def \xa0 print_prime ( number ): \n \n \n \n prime \xa0 = \xa0 is_prime ( number ) \n \n \n \n if \xa0 prime : \n \n \n \n descriptor \xa0 = \xa0 "" \n \n \n \n else : \n \n \n \n descriptor \xa0 = \xa0 "not " \n \n \n \n print ( number , " is " , \xa0 descriptor , \xa0 "prime." , \xa0 sep \xa0 = \xa0 "" , \xa0 end \xa0 = \xa0 " \\n \\n " ) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n #never ending loop \n \n \n \n \n \n \n \n while \xa0 1 \xa0 == \xa0 1 : \n \n \n \n print_prime ( get_number ( "Enter a number to check. Ctl-C to exit." )) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n view raw prime_check.py \xa0 hosted with ❤ by \xa0 GitHub \n \n \n And here is a solution without using functions. It is also a correct solution that accomplishes the given task, just without the use of functions. \n \n \n \n \n \n \n \n \n \n \n import \xa0 sys \n \n \n \n number \xa0 = \xa0 input ( "Please enter a number" \xa0 + \xa0 " \\n " \xa0 + \xa0 ">>>" ) \n \n \n \n number \xa0 = \xa0 int ( number ) \n \n \n \n prime \xa0 = \xa0 False \xa0 #initiate boolean for true false, default false \n \n \n \n if \xa0 number \xa0 > \xa0 0 : \n \n \n \n for \xa0 x \xa0 in \xa0 range \xa0 ( 2 , \xa0 number \xa0 - \xa0 1 ): \xa0 #this range excludes number and 1, both of which number is divisible by \n \n \n \n if \xa0 number \xa0 % \xa0 x \xa0 != \xa0 0 : \xa0 #If number isn\'t evenly divisible by x, start over with the next one \n \n \n \n continue \n \n \n \n elif \xa0 number \xa0 % \xa0 x \xa0 == \xa0 0 : \xa0 #If number is evenly divisible by x, it can\'t be prime \n \n \n \n sys . exit ( "The number is not prime." ) \n \n \n \n sys . exit ( "The number is prime." ) \xa0 #number wasn\'t evenly divisible by any x, so it\'s prime \n \n \n \n elif \xa0 number \xa0 == \xa0 0 : \n \n \n \n sys . exit ( "The number is not prime." ) \xa0 #According to the Google, 0 is not prime \n \n \n \n else : #if number is less than 0, the number is not prime (according to the Google). \n \n \n \n sys . exit ( "The number is not prime." ) \n \n \n \n \n \n \n \n view raw checkprimality.py \xa0 hosted with ❤ by \xa0 GitHub \n \n \n This solution doesn’t use functions, but does use list comprehensions, which are always fun. Thanks to Carlos for this solution. The interesting thing here is the observation that when you want to check if a number is prime, all you need to do is check the numbers from 2 to the square root of the number. This is because the pair of numbers that are both the largest factors of the number are \xa0 square root of x \xa0 and \xa0 square root of x . Otherwise, the number you are checking for can be found by finding the corresponding factor and checking it. \n \n \n \n \n \n \n \n \n \n \n # Assumes that "a" contains an integer > 2 whose primality needs to be verified \n \n \n \n # The algorithm builds a list of factors including the number 2 and all odd numbers \n \n \n \n # up to the square root of "a", and then checks if any of those numbers divides "a" \n \n \n \n # without a remainder - if so then "a" is not prime, else it is \n \n \n \n if sum([ True if a%factor == 0 else False for factor in ( [2] + list(range(3,int(math.sqrt(a))+1,2) )) ]): \n \n \n \n print("Number is composite") \n \n \n \n else: \n \n \n \n print("Number is prime") \n \n \n \n \n \n \n \n view raw gistfile1.txt \xa0 hosted with ❤ by \xa0 GitHub \n \n \n Another solution is a clean, short solution that uses list comprehensions. \n \n \n \n \n \n \n \n \n \n \n num \xa0 = \xa0 int ( raw_input ( \'Insert a number: \' )) \n \n \n \n a \xa0 = \xa0 [ x \xa0 for \xa0 x \xa0 in \xa0 range ( 2 , \xa0 num ) \xa0 if \xa0 num \xa0 % \xa0 x \xa0 == \xa0 0 ] \n \n \n \n \n \n \n \n def \xa0 is_prime ( n ): \n \n \n \n if \xa0 num \xa0 > \xa0 1 : \n \n \n \n if \xa0 len ( a ) \xa0 == \xa0 0 : \n \n \n \n print \xa0 \'prime\' \n \n \n \n else : \n \n \n \n print \xa0 \'NOT prime\' \n \n \n \n else : \n \n \n \n print \xa0 \'NOT prime\' \n \n \n \n \n \n \n \n is_prime ( num ) \n \n \n \n \n \n \n \n view raw ex11.py \xa0 hosted with ❤ by \xa0 GitHub \n \n \n Share the fun! \n \n 檢查基本功能解決方案 \n 練習11 \n 向用戶詢問一個數字，並確定該數字是否為質數。 （對於那些忘記的人，質數是沒有除數的數。） 您可以（並且應該！）使用 練習4 的答案 來幫助您。 \n 樣品溶液 \n 解決此問題的方法有很多，因此這裡有一個示例解決方案： \n 這是解決問題的功能的不同細分。 三個 \'\'\' 標記 之間的字符串 是代碼中的註釋，用於描述每個函數的功能。 \n \n \n \n \n \n \n \n \n \n \n def \xa0 get_number （ 提示 ）： \n \n \n \n \'\'\'返回輸入的整數值。 提示顯示文字\'\'\' \n \n \n \n 返回 \xa0 int （ 輸入 （ 提示 ）） \n \n \n \n \n \n \n \n \n \n \n \n def \xa0 is_prime （ number ）： \n \n \n \n \'\'\'返回質數為True，否則為False\'\'\' \n \n \n \n ＃邊緣案例 \n \n \n \n 如果 \xa0 數字 \xa0 == \xa0 1 ： \n \n \n \n 素數 \xa0 = \xa0 假 \n \n \n \n elif的 \xa0 數目 \xa0 == \xa0 2 ： \n \n \n \n 素數 \xa0 = \xa0 真 \n \n \n \n ＃所有其他素數 \n \n \n \n 其他 ： \n \n \n \n 素數 \xa0 = \xa0 真 \n \n \n \n 用於 \xa0 check_number \xa0 在 \xa0 範圍 （ 2 ，（ 數 \xa0 / \xa0 2 ） + \xa0 1 ）： \n \n \n \n 如果 \xa0 數字 \xa0 ％ \xa0 check_number \xa0 == \xa0 0 ： \n \n \n \n 素數 \xa0 = \xa0 假 \n \n \n \n 打破 \n \n \n \n 返回 \xa0 素數 \n \n \n \n \n \n \n \n def \xa0 print_prime （ number ）： \n \n \n \n 素數 \xa0 = \xa0 is_prime （ 數字 ） \n \n \n \n 如果 \xa0 素數 ： \n \n \n \n 描述符 \xa0 = \xa0 “” \n \n \n \n 其他 ： \n \n \n \n 描述符 \xa0 = \xa0 “不是” \n \n \n \n print （ number ， “ is” ， 描述符 ， “ prime。” ， sep \xa0 = \xa0 “” ， end \xa0 = \xa0 “ \xa0 \\ n \xa0 \\ n \xa0 ” ） \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ＃永不結束循環 \n \n \n \n \n \n \n \n 而 \xa0 1 \xa0 == \xa0 1時 ： \n \n \n \n print_prime （ get_number （ “輸入要檢查的數字 。Ctl \xa0 -C退出。” ） \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 查看原始 prime_check.py \xa0 託管與❤通過 GitHub上 \n \n \n 這是不使用函數的解決方案。 這也是不使用功能即可完成給定任務的正確解決方案。 \n \n \n \n \n \n \n \n \n \n \n 導入 \xa0 系統 \n \n \n \n 數字 \xa0 = \xa0 輸入 （ “請輸入數字” \xa0 + \xa0 “ \xa0 \\ n \xa0 ” \xa0 + \xa0 “ >>>” ） \n \n \n \n 數字 \xa0 = \xa0 整數 （ 數字 ） \n \n \n \n prime \xa0 = \xa0 False \xa0 ＃初始化布爾值為true false，默認為false \n \n \n \n 如果 \xa0 數字 \xa0 > \xa0 0 ： \n \n \n \n 對於 \xa0 X \xa0 在 \xa0 範圍 （ 2 ， 數 \xa0 - \xa0 1 ）： \xa0 ＃ 此範圍排除數和1，這兩個數是整除 \n \n \n \n 如果 \xa0 數字 \xa0 ％ \xa0 x \xa0 ！= \xa0 0 ：＃ 如果數字不能被x整除，則從下一個開始 \n \n \n \n 繼續 \n \n \n \n elif \xa0 number \xa0 ％ \xa0 x \xa0 == \xa0 0 ：＃ 如果數字可以被x整除，則不能為素數 \n \n \n \n sys 。 退出 （ “數字不是素數。” ） \n \n \n \n sys 。 exit （ “數字是質數。” ） # \xa0 number 不能被任何x整除，所以它是質數 \n \n \n \n elif的 \xa0 數目 \xa0 == \xa0 0 ： \n \n \n \n sys 。 exit （ “數字不是素數。” ） #Google表示，0不是素數 \n \n \n \n else ： ＃如果數字小於0，則該數字不是素數（根據Google）。 \n \n \n \n sys 。 退出 （ “數字不是素數。” ） \n \n \n \n \n \n \n \n 查看原始 checkprimality.py \xa0 託管與❤通過 GitHub上 \n \n \n 該解決方案不使用函數，但是使用列表推導，這總是很有趣。 感謝卡洛斯的解決方案。 有趣的是，觀察到當您要檢查數字是否為質數時，只需檢查2到該數字的平方根之間的數字即可。 這是因為這兩個都是最大數字的數字對 square root of x 和 square root of x 。 否則，可以通過查找相應的因子並進行檢查來找到要檢查的編號。 \n \n \n \n \n \n \n \n \n \n \n ＃假設“ a”包含一個大於2的整數，需要驗證其素數 \n \n \n \n ＃算法會建立一個因子列表，包括數字2和所有奇數 \n \n \n \n ＃直到“ a”的平方根，然後檢查這些數字中的任何一個是否除以“ a” \n \n \n \n ＃沒有餘數-如果是，則“ a”不是質數，否則為 \n \n \n \n 如果sum（[如果a％factor == 0，則為True，否則（[2] + list（range（3，int（math.sqrt（a））+ 1,2）））中的因子為False]））： \n \n \n \n print（“數字是合成的”） \n \n \n \n 其他： \n \n \n \n 打印（“數字是素數”） \n \n \n \n \n \n \n \n 查看原始 gistfile1.txt \xa0 與❤主辦 的GitHub \n \n \n 另一種解決方案是使用列表推導的簡潔的簡短解決方案。 \n \n \n \n \n \n \n \n \n \n \n num \xa0 = \xa0 int （ raw_input （ \'插入數字：\' ）） \n \n \n \n a \xa0 = \xa0 [ \xa0 x \xa0 表示 \xa0 x \xa0 在 \xa0 範圍 （ 2 ， num ）中， 如果 \xa0 num \xa0 ％ \xa0 x \xa0 == \xa0 0 \xa0 ] \n \n \n \n \n \n \n \n def \xa0 is_prime （ n ）： \n \n \n \n 如果 \xa0 num \xa0 > \xa0 1 ： \n \n \n \n 如果 \xa0 len （ a ） == \xa0 0 ： \n \n \n \n 打印 \xa0 \'prime\' \n \n \n \n 其他 ： \n \n \n \n 打印 \xa0 “不素” \n \n \n \n 其他 ： \n \n \n \n 打印 \xa0 “不素” \n \n \n \n \n \n \n \n is_prime （ num ） \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'P11-2.html'}, {'title': 'P12-2', 'text': 'List Ends Solutions \n \n Exercise 12 \n Write a program that takes a list of numbers (for example, \xa0 a = [5, 10, 15, 20, 25] ) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function. \n Sample solution \n \n \n \n \n \n \n \n \n \n \n def \xa0 list_ends ( a_list ): \n \n \n \n return \xa0 [ a_list [ 0 ], \xa0 a_list [ len ( a_list ) - 1 ]] \n \n \n \n \n \n \n \n view raw \n \n \n 練習12 \n 編寫一個程序，該程序接受一個數字列表（例如 a = [5, 10, 15, 20, 25] ），並製作一個僅包含給定列表的第一個和最後一個元素的新列表。 為了練習，請在函數內編寫此代碼。 \n 樣品溶液 \n \n \n \n \n \n \n \n \n \n \n def \xa0 list_ends （ a_list ）： \n \n \n \n 返回 [ 的a_list \xa0 [ \xa0 0 \xa0 ]， 的a_list \xa0 [ \xa0 LEN （ 的a_list ） - \xa0 1 \xa0 ]] \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'P12-2.html'}, {'title': '組員名單', 'text': '>>>>>>> f177d903d2b01a4a7c5845d7f06bf87af5e92638 \n Repository: \xa0 40923105 \xa0 | Site: \xa0 40923105 Repository: \xa0 40923109 \xa0 | Site: \xa0 40923109 Repository: \xa0 40923110 \xa0 | Site: \xa0 40923110 Repository: \xa0 40923111 \xa0 | Site: \xa0 40923111 Repository: \xa0 40923122 \xa0 | Site: \xa0 40923122 Repository: \xa0 40923130 \xa0 | Site: \xa0 40923130 Repository: \xa0 40923134 \xa0 | Site: \xa0 40923134 Repository: \xa0 40923135 \xa0 | Site: \xa0 40923135 \xa0 (組長) Repository: \xa0 40923139 \xa0 | Site: \xa0 40923139 Repository: \xa0 40923143 \xa0 | Site: \xa0 40923143 Repository: \xa0 40923153 \xa0 | Site: \xa0 40923153 \n \n', 'tags': '', 'url': '組員名單.html'}]};